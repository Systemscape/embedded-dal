import { Palette, ScrollView } from "std-widgets.slint";
import { GlobalSettings } from "global_settings.slint";

component SideBarItem inherits Rectangle {
    in property <bool> selected;
    in property <bool> has-focus;
    in-out property <string> text<=> label.text;
    in-out property <image> icon<=> label-icon.source;

    property <bool> moving: false;

    callback clicked<=>touch.clicked;

    min-height: l.preferred-height;

    states [
        pressed when touch.pressed: {
            state.opacity: 0.2;
        }
        hover when touch.has-hover: {
            state.opacity: 0.4;
        }
        selected when root.selected: {
            state.opacity: 1;
        }
        focused when root.has-focus: {
            state.opacity: 0.2;
        }
    ]
    state := Rectangle {
        opacity: 0;
        background: Palette.background.darker(0.2);

        animate opacity { duration: 50ms; }
    }

    l := HorizontalLayout {
        y: (parent.height - self.height) / 2;
        padding: 10px;
        spacing: 50px;
        alignment: start;

        Rectangle {
            label-icon := Image {
                x: 5px;
                y: 0px;
                // ensure there is no binding loop
                height: 100%;
            }

            //width:20px;
        }

        label := Text {
            color: Palette.foreground;
            vertical-alignment: center;
            font-size: 24px;
        }
    }

    touch := TouchArea {
        width: 100%;
        height: 100%;

        pointer-event(event) => {
            debug(event);
            if event.kind == PointerEventKind.move {
                if self.has-hover {
                    state.opacity = 0.2;                    
                } else {
                    state.opacity = 0;
                }
                //event.kind = PointerEventKind.up;
                //self.pointer-event(event);
            }
            if event.kind == PointerEventKind.cancel {
                state.opacity = 0;
                //event.kind = PointerEventKind.up;
                //self.pointer-event(event);
            }
        }
    }
}

export component SideBar inherits ScrollView {
    in property <[{icon: image, name: string}]> model: [];
    in property <string> title<=> label.text;
    in property <image> logo<=> logo.source;
    property <int> current-item<=> GlobalSettings.current-page;

    // This would cause a horizontal-scrollbar to appear
    //viewport-width: 200px;

    width: 200px;
    accessible-role: tab;

    /*
    TouchArea {
        width: parent.width;
        height: parent.height;
        moved => {
            root.viewport-x += self.mouse-x - self.pressed-x;
            root.viewport-y += self.mouse-y - self.pressed-y;
            debug("moved!");
        }
        clicked => {
            debug("clicked!");
        }
    }
    */
    

    VerticalLayout {
        padding-top: GlobalSettings.layout-padding;
        padding-bottom: GlobalSettings.layout-padding;
        spacing: GlobalSettings.layout-spacing;
        alignment: start;
        HorizontalLayout {
            padding: 2px;
            logo := Image {
                width: 30px;
            }

            label := Text {
                font-size: 16px;
                horizontal-alignment: center;
                vertical-alignment: center;
            }
        }

        navigation := VerticalLayout {
            alignment: start;
            vertical-stretch: 0;
            for item[index] in root.model: SideBarItem {
                clicked => {
                    root.current-item = index;
                }

                text: item.name;
                icon: item.icon;
                selected: index == root.current-item;
            }
        }

        VerticalLayout {
            bottom := VerticalLayout {
                padding-left: GlobalSettings.layout-padding;
                padding-right: GlobalSettings.layout-padding;

                @children
            }
        }
    }
}
