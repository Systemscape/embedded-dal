import { Button } from "std-widgets.slint";


component MyButton inherits Rectangle {
    in-out property text <=> txt.text;
    in-out property font-size <=> txt.font-size;
    in property <length> button-height: txt.preferred-height * 1.6;
    callback clicked <=> touch.clicked;

    border-radius: root.height / 2;
    border-width: 3px;
    border-color: root.background.darker(45%);
    background: touch.pressed ? #6b8282 : touch.has-hover ? #6c616c : lightgray;

    height: button-height;
    min-width: txt.preferred-width + 20px;

    txt := Text {
        x: (parent.width - self.width) / 2 + (touch.pressed ? 2px : 0);
        y: (parent.height - self.height) / 2 + (touch.pressed ? 1px : 0);
        color: touch.pressed ? darkgray : black;
    }

    touch := TouchArea { }
}

export enum Ampel { unknown, calibration, green, yellow, red}

export component MainWindow inherits Window {
    default-font-size: 30pt;

    title: "CO2 Monitor";
    min-width: 800px;
    min-height: 480px;
    background: white;
    property <length> ampel_offset: 45px;
    property <length> ampel_spacing: 20px;
    property <length> ampel_diameter: 70px;
    property <length> ampel_border_margin: 10px;
    property <float> ampel_alpha: 0.15;

    property <bool> state: false;

    in property <int> co2_ppm: 3333;
    in property <Ampel> ampel_value: Ampel.unknown;
    in property <string> status_text: "Status...";
    in property <string> in_progress: "";
    in property <int> time_since_last: 0;

    callback start_measurement();
    callback brightness_increase();
    callback brightness_decrease();
    callback force_compensation();

    co2text := Text {
        x: 100px;
        y: 80px;
        width: parent.width - self.x;
        wrap: TextWrap.no-wrap;
        horizontal-alignment: center;
        text: co2_ppm;
        font-size: 255px; // 256px makes it crash in dubious ways -> https://github.com/slint-ui/slint/issues/7936
        font-weight: 600;
        letter-spacing: 15px;
        //font-size: 280px;
        color: black;
    }

    Text {
        x: 50px;
        y: 440px;
        horizontal-alignment: left;
        text: status_text;
        font-size: 15px;
    }

    Text {
        x: 140px;
        y: 15px;
        horizontal-alignment: left;
        text: "Letzte Messung: " + time_since_last + " s";
        font-size: 20px;
    }

    // Currently unused. This won't render when set inside the measure_co2 function.
    in_progress_text := Text {
        x: 350px;
        y: 80px;
        text: in_progress;
        horizontal-alignment: left;
        font-size: 20px;
    }

    TouchArea {
        x: 0px;
        width: 50%;
        clicked => {
            debug("start_measurement()");
            root.start_measurement();
        }

        Rectangle {
            x: 30px - ampel_border_margin;
            y: ampel_offset + ampel_diameter + ampel_spacing - ampel_border_margin;

            width: ampel_diameter + 2 * ampel_border_margin;
            height: 3 * ampel_diameter + 2 * ampel_spacing + 2 * ampel_border_margin;
            border-radius: root.width / 2;
            border-width: 2px;
            border-color: gray;
        }

        if ampel_value == Ampel.unknown: Rectangle {
            x: 30px;
            y: ampel_offset;

            width: ampel_diameter;
            height: ampel_diameter;
            border-radius: root.width / 2;
            background: gray;
        }
        if ampel_value == Ampel.calibration: Rectangle {
            x: 30px;
            y: ampel_offset;

            text := Text {
                text: "CAL";
                font-weight: 900;
                font-size: 20px;
                color: black;
                animate color {
                    duration: 2000ms;
                    direction: alternate;
                    iteration-count: -1;
                }
            }

            width: ampel_diameter;
            height: ampel_diameter;
            border-radius: root.width / 2;
            background: blue.with-alpha(0.7);
            animate background {
                duration: 2000ms;
                direction: alternate;
                iteration-count: -1;
            }
        }
        Rectangle {
            x: 30px;
            y: ampel_offset + ampel_diameter + ampel_spacing;

            width: ampel_diameter;
            height: ampel_diameter;
            border-radius: root.width / 2;
            background: ampel_value == Ampel.red ? red : red.with-alpha(ampel_alpha);
        }

        Rectangle {
            x: 30px;
            y: ampel_offset + 2 * (ampel_diameter + ampel_spacing);

            width: ampel_diameter;
            height: ampel_diameter;
            border-radius: root.width / 2;
            background: ampel_value == Ampel.yellow ? yellow : yellow.with-alpha(ampel_alpha);
        }

        Rectangle {
            x: 30px;
            y: ampel_offset + 3 * (ampel_diameter + ampel_spacing);

            width: ampel_diameter;
            height: ampel_diameter;
            border-radius: root.width / 2;
            background: ampel_value == Ampel.green ? green : green.with-alpha(ampel_alpha);
        }
    }

    HorizontalLayout {
        height: 60px;
        width: 150px;
        spacing: 20px;
        y: 400px;
        x: 560px;

        MyButton {
            text: "☀";
            font-size: 16pt;
            button-height: 60px;
            width: 100px;
            clicked => {
                brightness_decrease();
                debug("brightness_decrease()");
            }
        }

        MyButton {
            text: "☀";
            font-size: 27pt;
            button-height: 60px;
            width: 100px;
            clicked => {
                brightness_increase();
                debug("brightness_increase()");
            }
        }
    }

    MyButton {
        text: "CAL";
        height: 71px;
        x: 680px;
        y: 15px;

        min-width: 0px;
        width: 100px;

        font-size: 20pt;

        clicked => {
            force_compensation();
            debug("force_compensation()");
        }
    }
}
